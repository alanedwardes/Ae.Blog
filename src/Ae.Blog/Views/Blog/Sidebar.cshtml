@using Humanizer
@using Ae.Blog.Extensions;
@model Ae.Blog.Models.Post[]
<aside class="right desktoponly">
    <div class="sidebar callout">
        <div>
            <input type="search" placeholder="Filter posts" id="search" />
            <script>
                let searchPromise = null;
                let searchCache = null;
                const searchElement = document.querySelector('#search');

                function doSearch() {
                    if (searchPromise === null) {
                        searchPromise = fetch("/blog/search")
                            .then(data => data.json())
                            .then(json => {
                                searchCache = json;
                                doSearch();
                            });
                        return;
                    }

                    if (searchCache === null){
                        return;
                    }

                    const searchFeedback = document.querySelector('#search-feedback');
                    searchFeedback.innerHTML = '';

                    const terms = searchElement.value.toLowerCase();
                    document.querySelectorAll('article.post, .featured').forEach(article => {
                        article.style.display = terms ? 'none' : 'block';
                    });

                    const queryWords = terms.match(/\b(\w+)\b/g);

                    let postIndexes = new Set();

                    Object.keys(searchCache.words).forEach(postWord => {
                        queryWords.forEach(queryWord => {
                            if (queryWord.match(postWord)) {
                                searchCache.words[postWord].forEach(index => {
                                    postIndexes.add(index);
                                });
                            }
                        });
                    });

                    let postsNotFound = [];

                    for (let i = 0; i < searchCache.posts.length; i++) {
                        if (postIndexes.has(i)) {
                            let articleElement = document.querySelector('article.post[slug=' + searchCache.posts[i].slug + ']');
                            if (articleElement) {
                                articleElement.style.display = 'block';
                            } else {
                                postsNotFound.push(searchCache.posts[i]);
                            }
                        }
                    }

                    let searchTitle = document.createElement('h2');
                    searchTitle.innerText = 'Search Results for "' + queryWords.join('", "') + '"';
                    searchFeedback.appendChild(searchTitle);

                    if (postsNotFound.length > 0) {
                        searchFeedback.innerHTML += '<p class="meta">Found ' + postIndexes.size + ' matching posts, but some are not visible:</p>';
                        searchFeedback.innerHTML += '<ul>' + postsNotFound.map(post => '<li><a href="/blog/posts/' + post.slug + '/">' + post.title + '</a></li>').join('') + '</ul>';
                    } else {
                        searchFeedback.innerHTML += '<p class="meta">Showing ' + postIndexes.size + ' posts matching these terms</p>';
                    }
                }

                searchElement.addEventListener('input', doSearch);
            </script>
            <ul class="cloud">
                @{
                    var wordStatistics = new Dictionary<string, int>();

                    foreach (var post in Model)
                    {
                        post.GetWordStatistics(wordStatistics);
                    }

                    var random = new Random(wordStatistics.Count);

                    var topWords = wordStatistics.OrderByDescending(x => x.Value).Take(25).OrderBy(x => random.Next(0, int.MaxValue));
                    var totalCount = topWords.Sum(x => x.Value);

                    foreach (var topWord in topWords)
                    {
                        var weight = (int)((topWord.Value / (double)totalCount) * 100d);
                        <li class="@("weight" + weight)"><a href="/blog/words/@Uri.EscapeDataString(topWord.Key)/">@topWord.Key</a></li>
                    }
                }
            </ul>
            <div id="dynamic-latest-comments"></div>
            @foreach (var month in Model.GroupBy(x => x.Published.Year.ToString()))
            {
                <h3>Posts in @month.Key</h3>
                <ul>
                    @foreach (var post in month)
                    {

                        <li>@post.Title <a href="@post.Url">on @post.Published.Day.Ordinalize() of @post.Published.ToString("MMM")</a></li>
                    }
                </ul>
            }
        </div>
    </div>
</aside>
<script>
    fetch("https://alanedwardes.com/api/latestcomments.json")
        .then(data => data.json())
        .then(data => {
            const latestComments = document.getElementById('dynamic-latest-comments');

            const heading = document.createElement('h3');
            heading.innerText = 'Recent Comments';
            latestComments.appendChild(heading);

            const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

            const ordinalSuffix = d => {
                if (d > 3 && d < 21) {
                    return 'th';
                }
                switch (d % 10) {
                    case 1: return "st";
                    case 2: return "nd";
                    case 3: return "rd";
                    default: return "th";
                }
            }

            const list = document.createElement('ul');
            for (let i = 0; i < Math.min(data.length, 5); i++) {
                const item = document.createElement('li');

                const author = document.createElement('span');
                author.textContent = data[i].comment.author;

                const space = document.createElement('span');
                space.textContent = ' ';

                const createdAt = new Date(data[i].comment.createdAt);

                const date = document.createElement('a');
                date.href = '/blog/posts/' + data[i].post.slug + '/#comment-' + data[i].comment.id;
                date.textContent = 'on ' + createdAt.getDate() + ordinalSuffix(createdAt.getDate()) + ' of ' + monthNames[createdAt.getMonth()] + ' ' + createdAt.getFullYear();

                item.appendChild(author);
                item.appendChild(space);
                item.appendChild(date);

                list.appendChild(item);
            }

            latestComments.appendChild(list);
        });
</script>