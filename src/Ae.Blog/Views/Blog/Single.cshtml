@using Ae.Blog.Extensions;
@using System.Text;
@using Ae.Blog.Models;
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.DependencyInjection
@model Ae.Blog.Models.BlogModel
@{
    ViewData["Title"] = Model.Single.Title;
    ViewData["Description"] = Model.Single.GetFirstLineText();

    var staticAssetPrefix = Context.RequestServices.GetRequiredService<IConfiguration>()["STATIC_ASSET_PREFIX"];

    var footerIncludebuilder = new StringBuilder();

    if (Model.Single.ContentAll.Contains("```"))
    {
        footerIncludebuilder.AppendLine($"<script src=\"/{staticAssetPrefix}/lib/highlight/highlight.min.js\"></script>");

        var languageAliases = new Dictionary<string, string>
        {
            { "html", "xml" },
            { "groovy", "groovy" },
            { "csharp", "csharp" },
            { "javascript", "javascript" },
            { "json", "json" },
            { "cpp", "cpp" },
            { "ini", "ini" },
            { "bash", "bash" },
            { "xml", "xml" },
            { "yaml", "yaml" },
            { "python", "python" },
            { "diff", "diff" }
        };

        foreach (var alias in languageAliases)
        {
            if (Model.Single.ContentAll.Contains($"```{alias.Key}"))
            {
                footerIncludebuilder.AppendLine($"<script src=\"/{staticAssetPrefix}/lib/highlight/languages/{alias.Value}.min.js\"></script>");
            }
        }

        footerIncludebuilder.AppendLine("<script>" +
            "var hljsThemeLink = document.createElement('link');" +
            "hljsThemeLink.rel = 'stylesheet';" +
            $"hljsThemeLink.href = '/{staticAssetPrefix}/lib/highlight/atom-one-dark.min.css';" +
            "hljsThemeLink.type = 'text/css';" +
            "document.getElementsByTagName('head')[0].appendChild(hljsThemeLink);" +
            "hljs.highlightAll();" +
            "</script>");
    }

    var firstImage = Model.Single.GetFirstImage();

    if (firstImage != null)
    {
        ViewData["Image"] = firstImage;
    }

    ViewData["Footer"] = footerIncludebuilder.ToString();
}

@await Html.PartialAsync("BlogCommon")

<section>
    <script type="application/ld+json">
    {
        "@@context": "http://schema.org",
        "@@type": "BreadcrumbList",
        "itemListElement": [
            {
                "@@type": "ListItem",
                "position": 1,
                "item": {
                    "@@id": "https://alanedwardes.com/blog/",
                    "name": "Blog"
                }
            },
            {
                "@@type": "ListItem",
                "position": 2,
                "item": {
                    "@@id": "https://alanedwardes.com@(Model.Single.Url)",
                    "name": "@Model.Single.Title"
                }
            }
        ]
    }
    </script>
    @await Html.PartialAsync("Post", new PostModel(Model.Single, true))
    @{
        var previousPost = @Model.Archive.OrderBy(x => x.Published).TakeWhile(x => x.Slug != Model.Single.Slug).LastOrDefault();
        var nextPost = @Model.Archive.OrderBy(x => x.Published).SkipWhile(x => x.Slug != Model.Single.Slug).Skip(1).FirstOrDefault();
        var randomPost = @Model.Archive.Where(x => x.Slug != Model.Single.Slug && x.Slug != nextPost?.Slug && x.Slug != previousPost?.Slug).OrderBy(x => Guid.NewGuid()).FirstOrDefault();

        if (previousPost != null)
        {
            <p>⬅️ Previous post: <a href="@previousPost.Url">@previousPost.Title</a></p>
        }

        if (nextPost != null)
        {
            <p>➡️ Next post: <a href="@nextPost.Url">@nextPost.Title</a></p>
        }

        if (randomPost != null)
        {
            <p>🎲 Random post: <a href="@randomPost.Url">@randomPost.Title</a></p>
        }
    }

    <h2 id="comments">Comments</h2>
    <div id="disqus_thread">
        <p>Please <a href="#comments" onclick="fetchComments()">click here</a> to load comments.</p>
    </div>
    <script>
    var commentsElement = document.getElementById("disqus_thread");

    if (document.location.hash.startsWith('#comment')) {
        fetchComments();
    } else {
        var observer = new IntersectionObserver(function (entries) {
            if (entries[0].isIntersecting) {
                fetchComments();
            }
        });
        observer.observe(commentsElement);
    }

    var commentsLoaded = false;
    function fetchComments() {
        if (commentsLoaded) {
            return;
        }

        commentsLoaded = true;
        commentsElement.innerHTML = 'Loading comments...';

        // Configure Disqus
        window.disqus_config = function () {
            this.page.url = "https://alanedwardes.com" + "@Model.Single.Url";
            this.page.identifier = "@Model.Single.Slug";
        };

        // Load Disqus
        var d = document, s = d.createElement('script');
        s.src = 'https://alanedwardes.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    }
    </script>
</section>
