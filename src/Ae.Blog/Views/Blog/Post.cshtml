@using Ae.Blog.Extensions;
@model Ae.Blog.Models.PostModel
<article class="post" slug="@Model.Post.Slug">
    @if (Model.IsSingle)
    {
        <h2>@Model.Post.Title</h2>
    }
    else
    {
        <h2><a href="@Model.Post.Url">@Model.Post.Title</a></h2>
    }

    <p class="meta">
        @if (Model.Post.Updated.HasValue && (Model.Post.Updated.Value - Model.Post.Published > TimeSpan.FromDays(5)))
        {
            <span><time datetime="@Model.Post.Published.ToString("o")" title="@Model.Post.Published">📅 @Model.Post.Published.ToOrdinalWords()</time>, updated @Model.Post.Updated.Value.ToOrdinalWords()</span>
        }
        else
        {
            <span><time datetime="@Model.Post.Published.ToString("o")" title="@Model.Post.Published">📅 @Model.Post.Published.ToOrdinalWords()</time></span>
        }

        <span> 🔖 <a href="@Model.Post.CategoryUrl">@Model.Post.Category</a></span>

        <span> ⏲️ @((TimeSpan.FromMinutes(Math.Max(1, Model.Post.ContentWords.Count() / 200))).Humanize()) to read</span>

        <span id="dynamic-comment-count"></span>
    </p>

        @if (Model.IsSingle)
        {
            <script>
                fetch("https://alanedwardes.com/api/commentcount.json?slug=@(Model.Post.Slug)")
                    .then(data => data.json())
                    .then(data => {
                        let commentsCount = data.count;
                        if (commentsCount > 0)
                        {
                            let commentsInfo = document.getElementById('dynamic-comment-count');
                            commentsInfo.innerHTML = ' 💬 <a href="#comments">' + commentsCount + ' ' + (commentsCount === 1 ? 'comment' : 'comments') + '</a>';
                        }
                    });
            </script>
        }

        @{
            var lastUpdated = Model.Post.Updated ?? Model.Post.Published;
        }

        @if (Model.IsSingle && DateTime.UtcNow - lastUpdated > TimeSpan.FromDays(365 * 3))
        {
            <p class="highlight">⚠️ This post was last updated in @lastUpdated.Year, meaning its contents may be outdated.</p>
        }

        @Html.Raw(Model.Post.GetMarkdown(Model.IsSingle))

        @if (Model.Post.HasSummary && !Model.IsSingle)
        {
            <p><a href="@Model.Post.Url">Continue Reading &raquo;</a></p>
        }

        @if (Model.IsSingle)
        {
            var topWords = Model.Post.ContentWordStatistics.OrderByDescending(x => x.Value).Take(15);

            <p class="highlight">
                <span>🏷️ </span>

                @foreach (var topWord in topWords)
                {
                    <a href="/blog/words/@Uri.EscapeDataString(topWord.Key)/">@topWord.Key</a>
                }
            </p>
        }
    </article>
